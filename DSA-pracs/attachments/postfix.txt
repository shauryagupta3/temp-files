#include <iostream>
#include <sstream>
#include <typeinfo>
#include <math.h>

using namespace std;
template <class T, int size>
class stackArr
{
private:
public:
    int arr[size] = {0};
    int top = -1;
    int *nums = arr;

    stackArr(/* args */);
    void push(T el);
    T pop();
    void clear();
    void display();
    ~stackArr();
};

template <class T, int size>
stackArr<T, size>::stackArr(/* args */) {}

template <class T, int size>
stackArr<T, size>::~stackArr(/* args */)
{
    delete[] nums;
}

template <class T, int size>
void stackArr<T, size>::clear()
{
    while (top > -1)
    {
        top--;
    }
}

template <class T, int size>
void stackArr<T, size>::push(T el)
{
    if (top + 1 < sizeof(arr) / sizeof(int))
    {
        arr[++top] = el;
    }
}

template <class T, int size>
void stackArr<T, size>::display()
{
    int index = 0;
    while (index <= top)
    {
        cout << arr[index++] << " ";
    }
    cout << endl;
}

template <class T, int size>
T stackArr<T, size>::pop()
{
    return arr[top--];
}

int main(int argc, char const *argv[])
{
    stackArr<int, 50> x;
    string exp;
    getline(cin, exp);
    // cout << exp << endl;

    for (int i = 0; i < exp.size(); i++)
    {
        if (isdigit(exp.at(i)))
        {
            int num = 0;
            while (isdigit(exp.at(i)))
            {
                num = num * 10 + (int)(exp.at(i) - '0');
                i++;
            }
            x.push(num);
        }
        else if (exp.at(i) == '+')
        {
            int op1 = x.pop();
            int op2 = x.pop();
            x.push(op1 + op2);
        }
        else if (exp.at(i) == '-')
        {
            int op1 = x.pop();
            int op2 = x.pop();
            x.push(op2 - op1);
        }
        else if (exp.at(i) == '*')
        {
            int op1 = x.pop();
            int op2 = x.pop();
            x.push(op1 * op2);
        }
        else if (exp.at(i) == '/')
        {
            int op1 = x.pop();
            int op2 = x.pop();
            x.push(op2 / op1);
        }
        else if (exp.at(i) == '^')
        {
            int op1 = x.pop();
            int op2 = x.pop();
            x.push(pow(op2, op1));
        }
        else if (exp.at(i) = ' ')
        {
            continue;
        }
    }
    x.display();
    return 0;
}