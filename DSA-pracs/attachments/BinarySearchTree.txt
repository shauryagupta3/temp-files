#include <iostream>
using namespace std;

class Node {
public:
    int val;
    Node* left;
    Node* right;

    Node(int el) {
        val = el;
        left = NULL;
        right = NULL;
    }
};

class BinarySearchTree {
private:
    Node* root;

    void addElemToRoot(int el) {
        if (root == NULL) {
            Node* p = new Node(el);
            root = p;
        } else {
            Node* p = new Node(el);
            Node* q = root;
            while (q != NULL) {
                if (el < q->val) {
                    if (q->left == NULL) {
                        q->left = p;
                        return;
                    }
                    q = q->left;
                } else if (el > q->val) {
                    if (q->right == NULL) {
                        q->right = p;
                        return;
                    }
                    q = q->right;
                } else {
                    return;
                }
            }
        }
    }

    void printTreeInOrder(Node* root) {
        if (root != NULL) {
            printTreeInOrder(root->left);
            cout << root->val << " ";
            printTreeInOrder(root->right);
        }
    }

    void printTreePostOrder(Node* root) {
        if (root != NULL) {
            printTreePostOrder(root->left);
            printTreePostOrder(root->right);
            cout << root->val << " ";
        }
    }

    void printTreePreOrder(Node* root) {
        if (root != NULL) {
            cout << root->val << " ";
            printTreePreOrder(root->left);
            printTreePreOrder(root->right);
        }
    }

    void removeElemFromRoot(int el) {
        Node* p = search(el);
        if (p == NULL) {
            return;
        } else if (p->right == NULL && p->left == NULL) {
            deleteElem(el);
        } else if (p->right == NULL && p->left != NULL) {
            Node* prev = searchPrev(el);
            if (prev->right->val == el) {
                prev->right = p->left;
            } else if (prev->left->val == el) {
                prev->left = p->left;
            }
        } else {
            Node* prev = searchPrev(el);
            Node* q = p;
            q = q->right;
            while (q->left != NULL) {
                q = q->left;
            }
            prev->val = q->val;
            deleteElem(el);
        }
    }

    Node* searchPrev(int el) {
        Node* p = root;
        Node* prev = root;
        while (p->val != el) {
            if (p == NULL) {
                return NULL;
            }
            if (p->val > el) {
                prev = p;
                p = p->left;
            } else {
                prev = p;
                p = p->right;
            }
        }
        return prev;
    }

    Node* search(int el) {
        Node* p = root;
        while (p->val != el) {
            if (p == NULL) {
                return NULL;
            }
            if (p->val > el) {
                if (p->left == NULL) {
                    return NULL;
                }
                p = p->left;
            } else {
                if (p->right == NULL) {
                    return NULL;
                }
                p = p->right;
            }
        }
        return p;
    }

    void deleteElem(int el) {
        Node* prev = root;
        Node* p = root;
        while (p->val != el) {
            if (el < p->val) {
                prev = p;
                if (p->left == NULL) {
                    prev->left = NULL;
                    return;
                }
                p = p->left;
            } else if (el > p->val) {
                prev = p;
                if (p->right == NULL) {
                    prev->right = NULL;
                    return;
                }
                p = p->right;
            } else {
                return;
            }
        }
        if (prev->val > el) {
            prev->left = NULL;
        } else {
            prev->right = NULL;
        }
    }

public:
    BinarySearchTree() {
        root = NULL;
    }

    void addElem(int el) {
        addElemToRoot(el);
    }

    void removeElem(int el) {
        removeElemFromRoot(el);
    }

    void printInorder() {
        printTreeInOrder(root);
        cout << endl;
    }

    void printPreorder() {
        printTreePreOrder(root);
        cout << endl;
    }

    void printPostorder() {
        printTreePostOrder(root);
        cout << endl;
    }

    string searchElem(int el) {
        return search(el) == NULL ? "Not Exists" : "Exists";
    }
};

void displayMenu() {
    cout << "Binary Search Tree Menu:\n";
    cout << "1. Add Element\n";
    cout << "2. Remove Element\n";
    cout << "3. Search Element\n";
    cout << "4. Print Inorder\n";
    cout << "5. Print Preorder\n";
    cout << "6. Print Postorder\n";
    cout << "7. Exit\n";
    cout << "Enter your choice: ";
}

int main() {
    BinarySearchTree bst;
    int choice, element;

    do {
        displayMenu();
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter element to add: ";
                cin >> element;
                bst.addElem(element);
                break;
            case 2:
                cout << "Enter element to remove: ";
                cin >> element;
                bst.removeElem(element);
                break;
            case 3:
                cout << "Enter element to search: ";
                cin >> element;
                cout << "Result: " << bst.searchElem(element) << endl;
                break;
            case 4:
                cout << "Inorder Traversal: ";
                bst.printInorder();
                break;
            case 5:
                cout << "Preorder Traversal: ";
                bst.printPreorder();
                break;
            case 6:
                cout << "Postorder Traversal: ";
                bst.printPostorder();
                break;
            case 7:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }

        cout << "\n-----------------------------------\n";
    } while (choice != 7);

    return 0;
}
